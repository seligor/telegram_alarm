import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from database import init_db, add_user, get_users_in_group, get_user_group
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AlarmStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_message = State()
    waiting_for_media = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )


def get_text_skip_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )


def get_media_skip_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üñº –ë–µ–∑ –º–µ–¥–∏–∞")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )


def get_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
def get_help_message(user_id: int, bot_username: str) -> str:
    group_id = get_user_group(user_id) or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return (
        "üîî <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
        "üìå <b>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b> –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π\n"
        "üëâ <code>/change_grp</code>\n\n"
        "üî¢ –≠—Ç–æ –¥–µ–≤—è—Ç–∏–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å\n"
        "—Ç–æ—Ç, –∫—Ç–æ –¥–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n"
        "üì° –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n"
        "üî∑ <b>–í–∞—à –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:</b> <code>{group_id}</code>\n\n"
        "üë• –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è,\n"
        "—Å–æ–æ–±—â–∏—Ç–µ –µ–º—É:\n"
        "1. –°—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ @{bot_username}\n"
        "2. –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π <code>{group_id}</code>\n\n"
        "üö® –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"
    ).format(group_id=group_id, bot_username=bot_username)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üö® <b>–ë–æ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_kb()
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    bot_username = (await bot.get_me()).username
    help_text = get_help_message(message.from_user.id, bot_username)
    await message.answer(
        help_text,
        reply_markup=get_main_kb(),
        disable_web_page_preview=True
    )


@dp.message(Command("change_grp"))
async def cmd_change_group(message: Message, state: FSMContext):
    await state.set_state(AlarmStates.waiting_for_group)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π 9-–∑–Ω–∞—á–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–¥:",
        reply_markup=get_cancel_kb()
    )


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_kb()
    )


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: Message):
    await cmd_help(message)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã
@dp.message(AlarmStates.waiting_for_group, F.text.regexp(r'^\d{9}$'))
async def register_group(message: Message, state: FSMContext):
    group_id = message.text
    try:
        add_user(message.from_user.id, message.from_user.username, group_id)
        await state.clear()
        await message.answer(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <code>{group_id}</code>!",
            reply_markup=get_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_kb()
        )


# –¢—Ä–µ–≤–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
@dp.message(F.text == "üö® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É")
async def alarm_start(message: Message, state: FSMContext):
    if not get_user_group(message.from_user.id):
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥–æ–π /change_grp",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    await state.set_state(AlarmStates.waiting_for_message)
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞¬ª:",
        reply_markup=get_text_skip_kb()
    )


@dp.message(AlarmStates.waiting_for_message, F.text == "üìù –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
@dp.message(AlarmStates.waiting_for_message, F.text)
async def alarm_message(message: Message, state: FSMContext):
    text = "" if message.text == "üìù –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else message.html_text
    await state.update_data(text=text)
    await state.set_state(AlarmStates.waiting_for_media)
    await message.answer(
        "üñºÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ë–µ–∑ –º–µ–¥–∏–∞¬ª:",
        reply_markup=get_media_skip_kb()
    )


@dp.message(AlarmStates.waiting_for_media, F.text == "üñº –ë–µ–∑ –º–µ–¥–∏–∞")
@dp.message(AlarmStates.waiting_for_media, F.photo | F.video)
async def alarm_media(message: Message, state: FSMContext):
    media = None
    if message.photo:
        media = ("photo", message.photo[-1].file_id)
    elif message.video:
        media = ("video", message.video.file_id)

    await state.update_data(media=media)
    await send_alarm(message, state)


async def send_alarm(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_group = get_user_group(message.from_user.id)

        if not user_group:
            await message.answer("–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=get_main_kb())
            await state.clear()
            return

        alarm_msg = (
            f"üö® <b>–¢–†–ï–í–û–ì–ê –æ—Ç @{message.from_user.username} (–≥—Ä—É–ø–ø–∞ {user_group})!</b>"
            f"\n\n{data.get('text', '')}"
        )

        users = [
            (uid, uname) for uid, uname in get_users_in_group(user_group)
            if uid != message.from_user.id
        ]

        if not users:
            await message.answer("–í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            await state.clear()
            return

        success_sent = 0
        media = data.get('media')

        for user_id, username in users:
            try:
                if media:
                    media_type, file_id = media
                    if media_type == "photo":
                        await bot.send_photo(
                            user_id,
                            photo=file_id,
                            caption=alarm_msg,
                            reply_markup=get_main_kb()
                        )
                    else:
                        await bot.send_video(
                            user_id,
                            video=file_id,
                            caption=alarm_msg,
                            reply_markup=get_main_kb()
                        )
                else:
                    await bot.send_message(
                        user_id,
                        alarm_msg,
                        reply_markup=get_main_kb()
                    )

                success_sent += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {username} ({user_id}): {e}")

        await message.answer(
            f"‚úÖ –¢—Ä–µ–≤–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_sent}/{len(users)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã!",
            reply_markup=get_main_kb()
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_kb()
        )
    finally:
        await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
